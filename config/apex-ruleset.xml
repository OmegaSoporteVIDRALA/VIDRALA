<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="Salesforce-Apex-Strict"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 
                             http://pmd.sourceforge.net/ruleset_2_0_0.xsd"
         xmlns:fn="http://www.w3.org/2005/xpath-functions">

    <description>
        Custom PMD rule set for Salesforce Apex classes to align with Salesforce best practices and internal validation. <!--Link to rules: https://docs.pmd-code.org/pmd-doc-6.55.0/pmd_rules_apex.html-->
    </description>

    <!-- ✅ Best Practices:Rules which enforce generally accepted best practices.  -->
    
        <rule ref="category/apex/bestpractices.xml/AvoidLogicInTrigger" disabled="true"/><!--As triggers do not allow methods like regular classes they are less flexible and suited to apply good encapsulation style-->
        <rule ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts" disabled="true"/><!--Apex unit tests should include at least one assertion-->
        <rule ref="category/apex/bestpractices.xml/ApexAssertionsShouldIncludeMessage" disabled="true"/><!--The second parameter of System.assert/third parameter of System.assertEquals/System.assertNotEquals is a message-->
        <rule ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveRunAs" disabled="true"/><!--Apex unit tests should include at least one runAs method.-->
        <rule ref="category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation" disabled="true"/><!--Apex test methods should have @isTest annotation instead of the testMethod keyword,as testMethod is deprecated.-->
        <rule ref="category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue" disabled="true"/><!--Apex unit tests should not use @isTest(seeAllData=true) because it opens up the existing database data for unexpected modification by tests.-->
        <rule ref="category/apex/bestpractices.xml/AvoidGlobalModifier" disabled="true"/><!--Global classes should be avoided (especially in managed packages) as they can never be deleted or changed in signature-->
        <rule ref="category/apex/bestpractices.xml/DebugsShouldUseLoggingLevel" disabled="true"/><!--The first parameter of System.debug, when using the signature with two parameters, is a LoggingLevel enum.-->

        <!-- 🔤 Code Style: Rules which enforce a specific coding style. -->
        <rule ref="category/apex/codestyle.xml/FieldNamingConventions" disabled="true"/><!--Configurable naming conventions for field declarations.-->
        <rule ref="category/apex/codestyle.xml/MethodNamingConventions" disabled="true"/><!--This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. static method, or test method)-->
        <rule ref="category/apex/codestyle.xml/ClassNamingConventions" disabled="true"/><!--This rule reports type declarations which do not match the regex that applies to their specific kind (e.g. enum or interface)..-->
        <rule ref="category/apex/codestyle.xml/FieldDeclarationsShouldBeAtStart" disabled="true"/><!--Field declarations should appear before method declarations within a class.-->
        <rule ref="category/apex/codestyle.xml/ForLoopsMustUseBraces" disabled="true"/><!--Avoid using ‘for’ statements without using surrounding braces.-->
        <rule ref="category/apex/codestyle.xml/FormalParameterNamingConventions" disabled="true"/><!--Configurable naming conventions for formal parameters of methods. -->
        <rule ref="category/apex/codestyle.xml/IfElseStmtsMustUseBraces" disabled="true"/><!--Avoid using if..else statements without using surrounding braces.-->
        <rule ref="category/apex/codestyle.xml/IfStmtsMustUseBraces" disabled="true"/><!--Avoid using if statements without using braces to surround the code block. -->
        <rule ref="category/apex/codestyle.xml/LocalVariableNamingConventions" disabled="true"/><!--This rule reports variable declarations which do not match the regex that applies to their specific kind (e.g. local variable, or final local variable).-->
        <rule ref="category/apex/codestyle.xml/OneDeclarationPerLine" disabled="true"/><!--Apex allows the use of several variables declaration of the same type on one line-->
        <rule ref="category/apex/codestyle.xml/PropertyNamingConventions" disabled="true"/><!--This rule reports property declarations which do not match the regex that applies to their specific kind (e.g. static property, or instance property)-->
        <rule ref="category/apex/codestyle.xml/WhileLoopsMustUseBraces" disabled="true"/><!--Avoid using ‘while’ statements without using braces to surround the code block. -->>

    <!-- 🏗️ Design: Rules that help you discover design issues. -->
        <rule ref="category/apex/design.xml/ExcessiveClassLength" disabled="true"/><!--Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions.-->
        <rule ref="category/apex/design.xml/ExcessiveParameterList" disabled="true"/><!--Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype.-->
        <rule ref="category/apex/design.xml/ExcessivePublicCount" disabled="true"/><!--Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk.-->
        <rule ref="category/apex/design.xml/NcssConstructorCount" disabled="true"/><!--This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor-->
        <rule ref="category/apex/design.xml/NcssMethodCount" disabled="true"/><!--This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given method-->
        <rule ref="category/apex/design.xml/NcssTypeCount" disabled="true"/><!--This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given type.-->
        <rule ref="category/apex/design.xml/StdCyclomaticComplexity" disabled="true"/><!--Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry.-->
        <rule ref="category/apex/design.xml/TooManyFields" disabled="true"/><!--Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields, possibly through grouping related fields in new objects-->
        <rule ref="category/apex/design.xml/CognitiveComplexity" disabled="true"/><!--Methods that are highly complex are difficult to read and more costly to maintain.-->
        <rule ref="category/apex/design.xml/CyclomaticComplexity" disabled="true"/><!--The complexity of methods directly affects maintenance costs and readability.-->
        <rule ref="category/apex/design.xml/AvoidDeeplyNestedIfStmts" disabled="true"/><!--Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.-->

     <!-- ❌ Error Prone: Rules to detect constructs that are either broken, extremely confusing or prone to runtime errors. -->
        <rule ref="category/apex/errorprone.xml/EmptyCatchBlock" disabled="true"/><!--Empty Catch Block finds instances where an exception is caught, but nothing is done-->
        <rule ref="category/apex/errorprone.xml/ApexCSRF" disabled="true"/><!--Having DML operations in Apex class constructor or initializers can have unexpected side effects: By just accessing a page, the DML 
                                      statements would be executed and the database would be modified.-->
        <rule ref="category/apex/errorprone.xml/AvoidDirectAccessTriggerMap" disabled="true"/><!--Avoid directly accessing Trigger.old and Trigger.new as it can lead to a bug.-->
        <rule ref="category/apex/errorprone.xml/AvoidHardcodingId" disabled="true"/><!-- It is essential to avoid hardcoding IDs in the Apex code between sandbox and production environments-->
        <rule ref="category/apex/errorprone.xml/AvoidNonExistentAnnotations" disabled="true"/><!-- This will prevent users of garbage annotations from being able to use legitimate annotations added to Apex in the future-->
        <rule ref="category/apex/errorprone.xml/EmptyIfStmt" disabled="true"/><!--Empty If Statement finds instances where a condition is checked but nothing is done about it.-->
        <rule ref="category/apex/errorprone.xml/EmptyStatementBlock" disabled="true"/><!--Empty block statements serve no purpose and should be removed.-->
        <rule ref="category/apex/errorprone.xml/EmptyTryOrFinallyBlock" disabled="true"/><!--Avoid empty try or finally blocks - what’s the point?-->
        <rule ref="category/apex/errorprone.xml/EmptyWhileStmt" disabled="true"/><!--Empty While Statement finds all instances where a while statement does nothing.-->
        <rule ref="category/apex/errorprone.xml/InaccessibleAuraEnabledGetter" disabled="true"/><!--he update prevents access to private or protected Apex getters from Aura and Lightning Web Components.-->
        <rule ref="category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass" disabled="true"/><!--Non-constructor methods should not have the same name as the enclosing class.-->
        <rule ref="category/apex/errorprone.xml/OverrideBothEqualsAndHashcode" disabled="true"/><!--Override both public Boolean equals(Object obj), and public Integer hashCode(), or override neither.-->
        <rule ref="category/apex/errorprone.xml/TestMethodsMustBeInTestClasses" disabled="true"/><!--Test methods marked as a testMethod or annotated with @IsTest, but not residing in a test class should be moved to a proper class 
                                                            or have the @IsTest annotation added to the class.-->

    <!-- 🚀 Performance: Rules that flag suboptimal code.-->
        <rule ref="category/apex/performance.xml/AvoidDmlStatementsInLoops" disabled="true"/><!--Avoid DML statements inside loops to avoid hitting the DML governor limit.-->
        <rule ref="category/apex/performance.xml/AvoidSoqlInLoops" disabled="true"/><!--New objects created within loops should be checked to see if they can created outside them and reused.-->
        <rule ref="category/apex/performance.xml/AvoidSoslInLoops" disabled="true"/><!--Sosl calls within loops can cause governor limit exceptions.-->
        <rule ref="category/apex/performance.xml/EagerlyLoadedDescribeSObjectResult" disabled="true"/><!--This rule finds DescribeSObjectResults which could have been loaded eagerly via SObjectType.getDescribe().-->
        <rule ref="category/apex/performance.xml/AvoidDebugStatements" disabled="true"/> <!--Debug statements contribute to longer transactions and consume Apex CPU time even when debug logs are not being captured.-->
        <rule ref="category/apex/performance.xml/OperationWithLimitsInLoop" disabled="true"/><!--Database class methods, DML operations, SOQL queries, SOSL queries, Approval class methods, Email sending,async scheduling or queueing within
                                                        loops can cause governor limit exceptions. Instead, try to batch up the data into a list and invoke the operation once on that list of data outside the loop.-->

    <!-- 🔒 Security: Rules that flag potential security flaws -->
        <rule ref="category/apex/security.xml/ApexSOQLInjection" disabled="true"/><!--Detects the usage of untrusted / unescaped variables in DML queries.-->
        <rule ref="category/apex/security.xml/ApexCrossSiteScripting" disabled="true"/><!--checks for potential Cross-Site Scripting (XSS) vulnerabilities in Apex code when using URL parameters-->
        <rule ref="category/apex/security.xml/ApexCryptoAPI" disabled="true"/> <!-- The rule makes sure you are using randomly generated IVs and keys for Crypto calls -->
        <rule ref="category/apex/security.xml/ApexXSSFromURLParam" disabled="true"/><!--Makes sure that all values obtained from URL parameters are properly escaped / sanitized to avoid XSS attacks.-->
        <rule ref="category/apex/security.xml/ApexXSSFromEscapeFalse" disabled="true"/><!--Reports on calls to addError with disabled escaping.-->
        <rule ref="category/apex/security.xml/ApexSuggestUsingNamedCred" disabled="true"/> <!--Detects hardcoded credentials used in requests to an endpoint.-->
        <rule ref="category/apex/security.xml/ApexOpenRedirect" disabled="true"/> <!--Checks against redirects to user-controlled locations. This prevents attackers from redirecting users to phishing sites.-->
        <rule ref="category/apex/security.xml/ApexInsecureEndpoint" disabled="true"/> <!--Checks against accessing endpoints under plain http. You should always use https for security.-->
        <rule ref="category/apex/security.xml/ApexCRUDViolation" disabled="true"/> <!--The rule validates you are checking for access permissions before a SOQL/SOSL/DML operation-->
        <rule ref="category/apex/security.xml/ApexDangerousMethods" disabled="true"/> <!--Checks against calling dangerous methods-->
        <rule ref="category/apex/security.xml/ApexSharingViolations" disabled="true"/> <!--Detect classes declared without explicit sharing mode if DML methods are used-->

</ruleset>
