name: 🚀 Deploy after Merge to Integra or UAT

on:
  push:
    branches:
      - INTEGRA
      - UAT

jobs:

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Instalar GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y
                    
      - name: 🔎 Verificar si el commit viene de un merge de PR
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "HEAD SHA (merge commit): $GITHUB_SHA"
          echo "GH_TOKEN: $ GH_TOKEN"

          echo "Buscando PR que tenga ese SHA como mergeCommit..."
          PR_INFO=$(gh pr list --state merged --base "$GITHUB_REF_NAME" --json number,mergeCommit,headRefOid --jq ".[] | select(.mergeCommit.oid == \"$GITHUB_SHA\")")

          if [ -z "$PR_INFO" ]; then
            echo "❌ Este commit no proviene de un merge de una PR. Cancelando..."
            exit 1
          else
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            HEAD_SHA=$(echo "$PR_INFO" | jq -r '.headRefOid')
            echo "✅ Commit originado desde PR #$PR_NUMBER con HEAD_SHA: $HEAD_SHA"
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            echo "PR_HEAD_SHA=$HEAD_SHA" >> $GITHUB_ENV
          fi

      - name: 📝 Set Salesforce Environment Variables
        id: set_sf_env
        run: |
          BASE_REF=$(echo "${GITHUB_REF##*/}")
          echo "🔎 Branch destino: $BASE_REF"

          if [[ "$BASE_REF" == "INTEGRA" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_INTEGRA }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_INTEGRA }}" >> $GITHUB_ENV
            echo "JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_INTEGRA }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "$BASE_REF" == "UAT" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_UAT }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_UAT }}" >> $GITHUB_ENV
            echo "JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_UAT }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "❌ Branch not supported"
            exit 1
          fi

      - name: 🔧 Instalar Salesforce CLI
        run: |
          npm install --global @salesforce/cli

      - name: 🔐 Autenticarse en Salesforce con JWT
        env:
          SFDX_CLIENT_ID: ${{ env.CLIENT_ID }}
          SFDX_JWT_KEY: ${{ vars.SFDX_JWT_KEY_UAT }}
          SFDX_USERNAME: ${{ env.USERNAME }}
          SFDX_URL: ${{ env.LOGIN_URL }}
        run: |
          echo "$SFDX_JWT_KEY" > server.key
          sf org login jwt \
            --client-id "$SFDX_CLIENT_ID" \
            --jwt-key-file server.key \
            --username "$SFDX_USERNAME" \
            --instance-url "$SFDX_URL" \
            --alias SF
     
      - name: ✍ Verify Authentication
        run: |
          sfdx force:org:list
          
      - name: 📥 Descargar último artifact validado
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "🔍 Buscando PR mergeada para el SHA: $GITHUB_SHA"

          PR_INFO=$(gh pr list --state merged --base "$GITHUB_REF_NAME" --json number,mergeCommit --jq ".[] | select(.mergeCommit.oid == \"$GITHUB_SHA\")")
          if [ -z "$PR_INFO" ]; then
            echo "❌ No se encontró PR mergeada que coincida con el SHA actual."
            exit 1
          fi

          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
          echo "✅ PR encontrada: #$PR_NUMBER"

          echo "🔎 Buscando runs exitosos del workflow de validación..."

          MATCHED=false
          for run_id in $(gh run list --workflow "📝 Validate Salesforce PR" --branch "$GITHUB_REF_NAME" --json databaseId,conclusion -q '[.[] | select(.conclusion == "success")].databaseId'); do
            echo "🔍 Analizando run ID: $run_id"
            mkdir -p .gh-temp
            gh run download "$run_id" -n validated-deploy-id -D .gh-temp

            if [ -f .gh-temp/commit.txt ]; then
              VALIDATED_SHA=$(cat .gh-temp/commit.txt)
              echo "✅ SHA validado en ese run: $VALIDATED_SHA"

              if [ "$VALIDATED_SHA" == "$GITHUB_SHA" ]; then
                echo "✅ Coincide el SHA validado con el SHA actual."
                cp -r .gh-temp .gh-deploy-data
                MATCHED=true
                break
              else
                echo "❌ No coincide, limpiando temporal..."
                rm -rf .gh-temp
              fi
            fi
          done

          if [ "$MATCHED" = false ]; then
            echo "❌ No se encontró un artifact válido que coincida con el SHA actual."
            exit 1
          fi
          
      - name: 📖 Read deploy ID
        id: read_id
        run: |
          if [ ! -f .gh-deploy-data/validated-deploy-id.txt ]; then
            echo "❌ No se encontró el archivo validated-deploy-id.txt"
            exit 1
          fi
          DEPLOY_ID=$(cat .gh-deploy-data/validated-deploy-id.txt)
          echo "✅ Deployment ID encontrado: $DEPLOY_ID"
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          
      - name: 🚀 Quick Deploy
        run: |
          echo "🔁 Quick deploying job ID: $DEPLOY_ID"
          sf deploy metadata quick \
            --target-org SF \
            --job-id "$DEPLOY_ID"
