name: 🚀 Deploy after Merge to Integra or UAT

on:
  push:
    branches:
      - INTEGRA
      - UAT

jobs:

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Instalar GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y
                    
      - name: 🔎 Verificar si el commit viene de un merge de PR
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "HEAD SHA: $GITHUB_SHA"
          echo "GH_TOKEN: $ GH_TOKEN"
          MERGE_COMMIT=$(gh pr list --state merged --base "$GITHUB_REF_NAME" --json mergeCommit --jq ".[] | select(.mergeCommit.oid == \"$GITHUB_SHA\")")

          if [ -z "$MERGE_COMMIT" ]; then
            echo "❌ Este commit no proviene de un merge de una PR. Cancelando..."
            exit 1
          else
            echo "✅ Commit originado desde PR #$PR_NUMBER"
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          fi

      - name: 📝 Set Salesforce Environment Variables
        id: set_sf_env
        run: |
          BASE_REF=$(echo "${GITHUB_REF##*/}")
          echo "🔎 Branch destino: $BASE_REF"

          if [[ "$BASE_REF" == "INTEGRA" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_INTEGRA }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_INTEGRA }}" >> $GITHUB_ENV
            echo "JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_INTEGRA }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "$BASE_REF" == "UAT" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_UAT }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_UAT }}" >> $GITHUB_ENV
            echo "JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_UAT }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "❌ Branch not supported"
            exit 1
          fi

      - name: 🔧 Instalar Salesforce CLI
        run: |
          npm install --global @salesforce/cli

      - name: 🔐 Autenticarse en Salesforce con JWT
        env:
          SFDX_CLIENT_ID: ${{ env.CLIENT_ID }}
          SFDX_JWT_KEY: ${{ vars.SFDX_JWT_KEY_UAT }}
          SFDX_USERNAME: ${{ env.USERNAME }}
          SFDX_URL: ${{ env.LOGIN_URL }}
        run: |
          echo "$SFDX_JWT_KEY" > server.key
          sf org login jwt \
            --client-id "$SFDX_CLIENT_ID" \
            --jwt-key-file server.key \
            --username "$SFDX_USERNAME" \
            --instance-url "$SFDX_URL" \
            --alias SF
     
      - name: ✍ Verify Authentication
        run: |
          sfdx force:org:list

      - name: 📥 Descargar último artifact validado
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "🔍 Buscando último run exitoso del workflow de validación..."
          
          # Obtener el commit SHA del merge actual
          MERGE_COMMIT_SHA=${{ github.sha }}

          MATCHED=false

          # Buscar entre los últimos run exitosos del workflow de validación
          for run_id in $(gh run list --workflow "📝 Validate Salesforce PR" --limit 10 --json databaseId,conclusion -q '[.[] | select(.conclusion == "success")].databaseId'); do
            # Descargar los artifacts del run
            gh run download "$run_id" -n validated-deploy-id -D .gh-deploy-data
            
            # 🔍 Verificar si se encuentra el commit SHA en el artifact            
            if [ -f .gh-deploy-data/commit.txt ]; then
              VALIDATED_SHA=$(cat .gh-deploy-data/commit.txt)
              if [ "$VALIDATED_SHA" == "$MERGE_COMMIT_SHA" ]; then
                echo "✅ Validación encontrada para este merge."
                cp -r .gh-temp .gh-deploy-data
                MATCHED=true
                break
              fi
            fi
            rm -rf .gh-temp
          done

          # Si no se encontró un match válido, abortar
          if [ "$MATCHED" = false ]; then
            echo "❌ No se encontró un validation que coincida con el merge."
            exit 1
          fi
          
      - name: 📖 Read deploy ID
        id: read_id
        run: |
          if [ ! -f .gh-deploy-data/validated-deploy-id.txt ]; then
            echo "❌ No se encontró el archivo validated-deploy-id.txt"
            exit 1
          fi
          DEPLOY_ID=$(cat .gh-deploy-data/validated-deploy-id.txt)
          echo "✅ Deployment ID encontrado: $DEPLOY_ID"
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV
          
      - name: 🚀 Quick Deploy
        run: |
          echo "🔁 Quick deploying job ID: $DEPLOY_ID"
          sf deploy metadata quick \
            --target-org SF \
            --job-id "$DEPLOY_ID"
