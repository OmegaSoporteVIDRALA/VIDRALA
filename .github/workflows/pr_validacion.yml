name: Validate Salesforce PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3
        
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

     # - name: Determine target branch
       # id: check_branch
       # run: |
       #   echo "TARGET_BRANCH=${{ github.event.workflow_run.pull_requests[0].base.ref }}" >> $GITHUB_ENV
        ##  BRANCH="${{ github.event.workflow_run.pull_requests[0].base.ref }}"
        #  echo "Target branch is $BRANCH"
       #   if [[ "$BRANCH" != "integra" && "$BRANCH" != "uat" && "$BRANCH" != "main" ]]; then
        #    echo "❌ Deployment only allowed to integra, uat or main branches."
       #     exit 1
       #   fi
      - name: 📝 Verificar variables de entorno
        run: echo "${{ github.SFDX_CLIENT_ID_UAT }}"

      - name: Crear archivo JWT desde secreto
        run: echo "${{ secrets.SFDX_JWT_KEY }}" > server.key

      - name: Verificar existencia y tamaño del archivo JWT
        run: |
          if [ -f server.key ]; then
            echo "✅ Archivo 'server.key' creado correctamente."
            ls -lh server.key
          else
            echo "❌ No se encontró el archivo 'server.key'."
            exit 1
          fi
          
      - name: ⏳ Install Salesforce CLI
        run: |
          curl -sL https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-x64.tar.xz -o sfdx.tar.xz
          mkdir -p sfdx
          tar xJf sfdx.tar.xz -C sfdx
          ./sfdx/install

      - name: Salesforce Authentication
        run: |
          echo "${{ secrets.SFDX_JWT_KEY_UAT }}" > server.key
          ls -l server.key  # Verifica que el archivo se haya creado correctamente
          sf org login jwt --client-id ${{ secrets.SFDX_CLIENT_ID_UAT }} --jwt-key-file server.key --username ${{ secrets.SFDX_USERNAME_UAT }} --alias EDP  
     
      - name: Verify Authentication
        run: |
          sfdx force:org:list

      - name: 📂 Check if there are Test classes
        id: check_tests
        run: |
          if find ./pmd/classes -name '*.cls' | grep -q .; then
            echo "testfound=true" >> $GITHUB_ENV
          else
            echo "testfound=false" >> $GITHUB_ENV
          fi

      - name: 📄 Ver contenido de las reglas
        run: cat ./config/apex-ruleset.xml

      - name: 🧰 Install PMD
        if: env.testfound == 'true' && github.base_ref  == 'UAT' 
        run: |
          curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
          unzip pmd.zip -d pmd
          mv pmd/pmd-bin-6.55.0 pmd-bin
          chmod +x pmd-bin/bin/run.sh

      - name: 📦 Verificar configuración antes de ejecutar PMD
        run: |
          echo "Ruta de PMD: ./pmd-bin/bin/run.sh"
          echo "Ruta de clases Apex: ./pmd/classes"
          echo "Configuración de reglas: ./config/apex-ruleset.xml"

      - name: 🤖 Run Apex tests if it was found
        if: env.testfound == 'true' &&  [[ "${{ github.base_ref }}" == "UAT" ]]
        run: |
          TEST_CLASSES=$(find ./pmd/classes -name "*Test.cls" -exec basename {} .cls \; | paste -sd, -)
          echo "🧪 Validating components with specific tests: $TEST_CLASSES"
          sfdx force:source:deploy -x force-app/main/manifest/package.xml --checkonly --testlevel RunSpecifiedTests --runtests $TEST_CLASSES --json || exit 1

      - name: ⏰ Validate Salesforce components if no Apex tests was found
        if: env.testfound == 'false' ||  [[ "${{ github.base_ref }}" != "UAT" ]]
        run: |
         echo "📭 No test classes found. Validating components without tests..."
         sfdx force:source:deploy -x force-app/main/manifest/package.xml --checkonly --testlevel NoTestRun --json || exit 1
