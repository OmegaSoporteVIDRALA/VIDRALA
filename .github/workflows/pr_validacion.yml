name: Validate Salesforce PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3
        
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

     # - name: ‚úíÔ∏è Determine target branch
       # id: check_branch
       # run: |
       #   echo "TARGET_BRANCH=${{ github.event.workflow_run.pull_requests[0].base.ref }}" >> $GITHUB_ENV
        ##  BRANCH="${{ github.event.workflow_run.pull_requests[0].base.ref }}"
        #  echo "Target branch is $BRANCH"
       #   if [[ "$BRANCH" != "integra" && "$BRANCH" != "uat" && "$BRANCH" != "main" ]]; then
        #    echo "‚ùå Deployment only allowed to integra, uat or main branches."
       #     exit 1
       #   fi
        
      - name: üìù Set Salesforce Environment Variables
        id: set_sf_env
        run: |
          BASE_REF="${GITHUB_BASE_REF:-${GITHUB_REF_NAME}}"
          echo "üîé Branch destino: $BASE_REF"

          if [[ "$BASE_REF" == "INTEGRA" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_INTEGRA }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_INTEGRA }}" >> $GITHUB_ENV
            echo "JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_INTEGRA }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "$BASE_REF" == "UAT" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_UAT }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_UAT }}" >> $GITHUB_ENV
            echo "JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_UAT }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [[ "$BASE_REF" == "MAIN" ]]; then
            echo "LOGIN_URL=https://login.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_PROD }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_PROD }}" >> $GITHUB_ENV
            echo "JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_PROD }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "‚ùå Branch not supported"
            exit 1
          fi

      - name: Verificar existencia y tama√±o del archivo JWT
        run: |
          echo "${{ env.JWT_KEY }}" > server.key
          if [ -f server.key ]; then
            echo "‚úÖ Archivo 'server.key' creado correctamente."
            ls -lh server.key
          else
            echo "‚ùå No se encontr√≥ el archivo 'server.key'."
            exit 1
          fi   

      - name: üîß Instalar Salesforce CLI
        run: |
          npm install --global @salesforce/cli

      - name: üîê Autenticarse en Salesforce con JWT
        env:
          SFDX_CLIENT_ID: ${{ env.CLIENT_ID }}
          SFDX_JWT_KEY: ${{ vars.SFDX_JWT_KEY_UAT }}
          SFDX_USERNAME: ${{ env.USERNAME }}
          SFDX_URL: ${{ env.LOGIN_URL }}
        run: |
          echo "$SFDX_JWT_KEY" > server.key
          sf org login jwt \
            --client-id "$SFDX_CLIENT_ID" \
            --jwt-key-file server.key \
            --username "$SFDX_USERNAME" \
            --instance-url "$SFDX_URL" \
            --alias SF

      - name: ‚úç Verify Authentication
        run: |
          sfdx force:org:list

      - name: üõ†Ô∏è Instalar xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: üìÇ Copiar Apex Classes y Triggers listados en package.xml
        run: |

          # Directorios de origen y destino
          PACKAGE_XML="./manifest/package.xml"
          DEST_DIR="./pmd/classes"
          SRC_CLASSES_DIR="./force-app/main/default/classes"
          SRC_TRIGGERS_DIR="./force-app/main/default/triggers"

          echo "üì¶ Package path: $PACKAGE_XML"

          # Asegurarse de que las carpetas de destino existan
          mkdir -p "$DEST_DIR"

          echo "üîç Analizando package.xml..."

          # Extraer ApexClass
          CLASS_NAMES=$(xmllint --xpath "//types/name[text()='ApexClass']/following-sibling::members" "$PACKAGE_XML" | sed 's/<members>//g' | sed 's/<\/members>//g')
          echo "üìö Resultado de APEX_CLASSES: '$APEX_CLASSES'"

          # Extraer ApexTrigger
          TRIGGER_NAMES=$(xmllint --xpath "//types/name[text()='ApexTrigger']/following-sibling::members" "$PACKAGE_XML" | sed 's/<members>//g' | sed 's/<\/members>//g')
          echo "üß© Resultado de APEX_TRIGGERS: '$APEX_TRIGGERS'"

          # Mover las clases y triggers listados en el package.xml a la carpeta de despliegue
          for CLASS in $CLASS_NAMES; do
            if [ -f "$SOURCE_DIR/$CLASS.cls" ]; then
              mv "$SOURCE_DIR/$CLASS.cls" "$DEST_DIR_CLASSES/"
            fi
            if [ -f "$SOURCE_DIR/$CLASS.cls-meta.xml" ]; then
              mv "$SOURCE_DIR/$CLASS.cls-meta.xml" "$DEST_DIR_CLASSES/"
            fi
          done

          # Mover ApexTriggers
          for TRIGGER in $TRIGGER_NAMES; do
            if [ -f "$TRIGGERS_DIR/$TRIGGER.trigger" ]; then
              mv "$TRIGGERS_DIR/$TRIGGER.trigger" "$DEST_DIR_TRIGGERS/"
            fi
            if [ -f "$TRIGGERS_DIR/$TRIGGER.trigger-meta.xml" ]; then
              mv "$TRIGGERS_DIR/$TRIGGER.trigger-meta.xml" "$DEST_DIR_TRIGGERS/"
            fi
          done

          echo "‚úÖ Archivos movidos a $DEST_DIR"


      - name: üìÇ Check if there are Test classes
        id: check_tests
        run: |
          if find ./pmd/classes -name '*.cls' | grep -q .; then
            echo "testfound=true" >> $GITHUB_ENV
          else
            echo "testfound=false" >> $GITHUB_ENV
          fi

      - name: üìÑ Ver contenido de las reglas
        run: cat ./config/apex-ruleset.xml

      - name: üß∞ Install PMD
        if: env.testfound == 'true' && github.base_ref  == 'UAT' 
        run: |
          curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
          unzip pmd.zip -d pmd
          mv pmd/pmd-bin-6.55.0 pmd-bin
          chmod +x pmd-bin/bin/run.sh

      - name: ü§ñ Run Apex tests if it was found 
        if: env.testfound == 'true'
        run: |
          TEST_CLASSES=$(find ./pmd/classes -name "*Test.cls" -exec basename {} .cls \; | paste -sd, -)
          echo "üß™ Validating components with specific tests: $TEST_CLASSES...."
          sf deploy metadata validate \
            --manifest ./manifest/package.xml \
            --target-org SF \
            --test-level RunSpecifiedTests \
            --tests "$TEST_CLASSES" \
            --json || exit 1
            
      - name: ‚è∞ Validate Salesforce components if no Apex tests was found
        if: env.testfound == 'false'
        run: |
         echo "üì≠ No test classes found. Validating components without tests..."
         sf deploy metadata validate \
            --target-org SF \
            --manifest ./manifest/package.xml \
            --test-level RunLocalTests \
            --json || exit 1

            
