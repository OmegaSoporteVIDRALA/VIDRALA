name: Validate Salesforce PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3
        
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

     # - name: Determine target branch
       # id: check_branch
       # run: |
       #   echo "TARGET_BRANCH=${{ github.event.workflow_run.pull_requests[0].base.ref }}" >> $GITHUB_ENV
        ##  BRANCH="${{ github.event.workflow_run.pull_requests[0].base.ref }}"
        #  echo "Target branch is $BRANCH"
       #   if [[ "$BRANCH" != "integra" && "$BRANCH" != "uat" && "$BRANCH" != "main" ]]; then
        #    echo "❌ Deployment only allowed to integra, uat or main branches."
       #     exit 1
       #   fi

      - name: ✒️ Set Salesforce Environment Variables
        id: set_sf_env
        run: |
          BASE_REF=${{ github.base_ref }}
          if [[ "$BASE_REF" == "INTEGRA" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_INTEGRA }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_INTEGRA }}" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_INTEGRA }}" >> $GITHUB_ENV
            echo "$BASE_REF"
          fi
          if [[ "$BASE_REF" == "UAT" ]]; then
            echo "LOGIN_URL=https://test.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_INTEGRA }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_INTEGRA }}" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_INTEGRA }}" >> $GITHUB_ENV
            echo "$BASE_REF"
          fi
          if [[ "$BASE_REF" == "MAIN" ]]; then
            echo "LOGIN_URL=https://login.salesforce.com" >> $GITHUB_ENV
            echo "CLIENT_ID=${{ secrets.SFDX_CLIENT_ID_PROD }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.SFDX_USERNAME_PROD }}" >> $GITHUB_ENV
            echo "JWT_KEY=${{ secrets.SFDX_JWT_KEY_PROD }}" >> $GITHUB_ENV
            echo "$BASE_REF"
          fi
      - name: ⏳ Install Salesforce CLI
        run: |
          npm install --global sfdx-cli

      - name: ✍ Authenticate with Salesforce using JWT
        env:
          SFDX_CLIENT_ID: ${{ env.CLIENT_ID }}
          SFDX_JWT_KEY: ${{ env.JWT_KEY }}
          SFDX_USERNAME: ${{ env.USERNAME }}
          SFDX_URL: ${{ env.LOGIN_URL }}
        run: |
          echo "$SFDX_JWT_KEY" > server.key
          sfdx auth:jwt:grant \
            --clientid "$SFDX_CLIENT_ID" \
            --jwtkeyfile server.key \
            --username "$SFDX_USERNAME" \
            --setdefaultdevhubusername \
            --instanceurl "$SFDX_URL"

      - name: 📂 Check if there are Test classes
        id: check_tests
        run: |
          if find ./pmd -name '*.cls' | grep -q .; then
            echo "testfound=true" >> $GITHUB_ENV
          else
            echo "testfound=false" >> $GITHUB_ENV
          fi

      - name: 🧰 Install PMD
        if: env.testfound == 'true' &&  [[ "${{ github.base_ref }}" == "UAT" ]]
        run: |
          curl -L -o pmd.zip https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
          unzip pmd.zip -d pmd
          mv pmd/pmd-bin-6.55.0 pmd-bin
          chmod +x pmd-bin/bin/run.sh

      - name: 🔍 Run PMD on test classes
        if: env.testfound == 'true' &&  [[ "${{ github.base_ref }}" == "UAT" ]]
        run: |
          mkdir -p reports/pmd
          ./pmd-bin/bin/run.sh pmd \
            -d ./pmd \
            -R ./config/apex-ruleset.xml \
            -f html \
            -r /pmd/reports/pmd-report.html
          status=$?
          echo "PMD exit status: $status"
          if [ "$status" -ne 0 ]; then
            echo "❌ PMD encontró problemas"
            exit $status
          fi 

      - name: 📎 Guardar reporte de PMD como artefacto
        uses: actions/upload-artifact@8f57d6056c5cc5f7e67d6a8b9aaf97e4d032c10d
        if: always()  # Guardar incluso si el paso anterior falló
        with:
          name: pmd-report
          path: reports/pmd/pmd-report.html

      - name: 🤖 Run Apex tests if it was found
        if: env.testfound == 'true' &&  [[ "${{ github.base_ref }}" == "UAT" ]]
        run: |
          TEST_CLASSES=$(find ./pmd -name "*Test.cls" -exec basename {} .cls \; | paste -sd, -)
          echo "🧪 Validating components with specific tests: $TEST_CLASSES"
          sfdx force:source:deploy -x force-app/main/manifest/package.xml --checkonly --testlevel RunSpecifiedTests --runtests $TEST_CLASSES --json || exit 1

      - name: ⏰ Validate Salesforce components
        if: env.testfound == 'false' ||  [[ "${{ github.base_ref }}" != "UAT" ]]
        run: |
         echo "📭 No test classes found. Validating components without tests..."
         sfdx force:source:deploy -x force-app/main/manifest/package.xml --checkonly --testlevel NoTestRun --json || exit 1
